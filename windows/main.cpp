#include <conio.h>
#include <fstream>
#include <stdio.h>
#include <string>
#include <time.h>
#include <windows.h>

#define __STDC_FORMAT_MACROS 1
#include <inttypes.h>

void inputf(double* out, const char* delim, size_t max_len);

int main() {
    printf("SvPgf v0.0\n");
    printf("A tool to convert CSV files generated by SPARKvue temperature sensors into PGFplots scatter plots.\n\n");
    while (1) {
        printf("Enter path to CSV file (or press ENTER to quit): ");
        char* path = (char*)malloc(sizeof(char) * MAX_PATH);
        fgets(path, MAX_PATH, stdin);
        if (path[0] == '\n')
            break;
        if (path[strlen(path) - 1] == '\n')
            path[strlen(path) - 1] = '\0';
        char* dir = (char*)malloc(sizeof(char) * MAX_PATH);
        GetModuleFileNameA(NULL, dir, MAX_PATH);
        strrchr(dir, '\\')[1] = '\0';
        if (!(strchr(path, ':') || strstr(path, "\\\\"))) {
            memmove(path + strlen(dir), path, strlen(path) + 1);
            memcpy(path, dir, strlen(dir));
        }
        std::ifstream* src = new std::ifstream(path);
        if (!src->is_open()) {
            delete src;
            printf("Could not open file \"%s\".", path);
            continue;
        }
        free(path);
        printf("Enter domain: [");
        double lower = 0.0, upper = 0.0, start = 0.0;
        inputf(&lower, ", \t\r\n", 64);
        printf(", ");
        inputf(&upper, "] \t\r\n", 64);
        printf("]\n");
        printf("Enter start time of experiment: ");
        scanf("%lf", &start);
        char* outf = (char*)malloc(sizeof(char) * MAX_PATH);
        sprintf(outf, "%sGraph%" PRId64 ".tex", dir, time(NULL));
        free(dir);
        std::ofstream* dest = new std::ofstream(outf, std::ofstream::trunc);
        if (!dest->is_open()) {
            src->close();
            delete src;
            delete dest;
            printf("Could not create file \"%s\".", outf);
            continue;
        }
        free(outf);
        *dest <<
R"(\documentclass{article}
\usepackage{amsmath}
\usepackage[letterpaper, left=1in, right=1in, top=1in, bottom=1in] {geometry}
\usepackage{tikz}
\usepackage{pgfplots}

\begin{document})" <<
        "\n\t\\begin{tikzpicture}\n"
        "\t\t\\begin{axis} [width=15cm, xlabel={Time, $t$ (s)}, ylabel={Temperature, $T$ ($^\\circ$C)}]\n"
        "\t\t\t\\addplot[scatter, mark=none, scatter src=\\thisrow{class}] table[x=x, y=y] {\n"
        "\t\t\t\tx y class\n";
        std::string line = std::string();
        std::getline(*src, line);
        while (!std::getline(*src, line).eof()) {
            char* cline = strdup(line.c_str());
            strtok(cline, ",");
            double time = strtod(strtok(NULL, ","), NULL);
            if (time < lower || time > upper)
                continue;
            double temp = strtod(strtok(NULL, ","), NULL);
            *dest << "\t\t\t\t" << time - start << " " << temp << " 0 \n";
            free(cline);
        }
        src->close();
        delete src;
        *dest <<
        "\t\t\t};\n\t\t\\end{axis}\n\t\\end{tikzpicture}\n\\end{document}\n";
        dest->close();
        delete dest;
        printf("Done\n\n");
        while (getchar() != '\n');
    }
    exit(EXIT_SUCCESS);
}

void inputf(double* out, const char* delim, size_t max_len = 64) {
    char* input = (char*)malloc(sizeof(char) * max_len);
    bool point = false;
    for (size_t i = 0;;)
    {
        char c = (char)getch();
        if (strchr(delim, c) && strlen(input))
            break;
        if (i >= max_len)
            continue;
        if (c >= '0' && c <= '9') {
            input[i++] = c;
            printf("%c", c);
        }
        else if (c == '.' && !point) {
            point = true;
            input[i++] = c;
            printf(".");
        }
        else if (c == '\b' && i) {
            if (input[--i] == '.')
                point = false;
            input[i] = '\0';
            printf("\b \b");
        }
    }
    *out = strtod(input, NULL);
    free(input);
}
